local ANIM_RUN = hash("player_run")
local ANIM_IDLE = hash("player_idle")
local ANIM_JUMP = hash("player_jump")
local ANIM_PUNCH = hash("player_punch")
local ANIM_SLASH = hash("player_slash")
local MSG_CONTACT_POINT_RESPONSE = hash("contact_point_response")
local INPUT_LEFT = hash("left")
local INPUT_RIGHT = hash("right")
local INPUT_JUMP = hash("jump")
local INPUT_RESTART = hash("restart")
local GROUP_OBSTACLES = hash("obstacles")

local GRAVITY_PIXELS_PER_SECOND = vmath.vector3(0, -3000, 0)
local JUMP_TAKEOFF_SPEED = 900
local WALK_SPEED = 500
-- local CLIPUP_PIXELS = 20

-- local function find(t, value)
-- 	for i, v in ipairs(t) do
-- 		if v == value then
-- 			return i
-- 		end
-- 	end
-- end

-- local function create_marker(self, pos, time)
-- 	local marker_id = factory.create("#marker_factory", pos)
-- 	if #self.debug_markers > 5 then
-- 		local a = table.remove(self.debug_markers, 1)
-- 		msg.post(a, "disable")
-- 	end

-- 	local sprite_url = msg.url(nil, marker_id, "sprite")
-- 	go.set(sprite_url, "tint", vmath.vector4(1, 0, 0, 1))

-- 	table.insert(self.debug_markers, marker_id)

-- 	timer.delay(time, false, function()
-- 		if marker_id then
-- 			local index = find(self.debug_markers, marker_id)
-- 			if index then
-- 				table.remove(self.debug_markers, index)
-- 			end
-- 			go.delete(marker_id)
-- 		end
-- 	end)
-- end

local function set_default_state(self)
	self.velocity = vmath.vector3()
	self.correction = vmath.vector3()
	self.faced_direction = 1
	self.ground_contact = true
	self.wall_contact = false

	go.set_position(vmath.vector3(62, 226, 0))
end

function init(self)
	self.debug_markers = {}

	set_default_state(self)

	msg.post(".", "acquire_input_focus")
end

local function update_animations(self)
	sprite.set_hflip("#sprite", self.faced_direction < 0)

	if self.ground_contact then
		-- if math.abs(self.velocity.x) > 0 then
		-- 	if self.anim ~= ANIM_RUN then
		-- 		sprite.play_flipbook("#sprite", ANIM_RUN)
		-- 		self.anim = ANIM_RUN
		-- 		print("set to run")
		-- 	end
		-- else
		-- 	if self.anim ~= ANIM_IDLE then
		-- 		sprite.play_flipbook("#sprite", ANIM_IDLE)
		-- 		self.anim = ANIM_IDLE
		-- 	end
		-- end
		if self.anim ~= ANIM_RUN then
			sprite.play_flipbook("#sprite", ANIM_RUN)
			self.anim = ANIM_RUN
		end
	else
		if self.anim ~= ANIM_JUMP then
			sprite.play_flipbook("#sprite", ANIM_IDLE)
			self.anim = ANIM_IDLE
		end
	end
end

function fixed_update(self, dt)
	update_animations(self)

	local offset = self.velocity * dt

	if not self.ground_contact then
		self.velocity = self.velocity + GRAVITY_PIXELS_PER_SECOND * dt
		-- Don't allow falling faster than gravity
		self.velocity.y = math.max(self.velocity.y, GRAVITY_PIXELS_PER_SECOND.y)
	end

	go.set_position(go.get_position() + offset)

	self.correction = vmath.vector3()
	self.wall_contact = false
	self.ground_contact = false
	self.faced_direction = 1
end

local function walk(self, direction)
	if direction ~= 0 then
		self.faced_direction = direction
	end
	if not self.wall_contact then
		self.velocity.x = WALK_SPEED * direction
	end
end

local function jump(self)
	if not self.ground_contact then
		return
	end
	self.ground_contact = false
	self.velocity.y = JUMP_TAKEOFF_SPEED

	self.anim = ANIM_JUMP
	sprite.play_flipbook("#sprite", ANIM_JUMP)
end

local function abort_jump(self)
	self.velocity.y = math.min(self.velocity.y, 0)
end

function on_input(self, action_id, action)
	if action_id == INPUT_LEFT then
		walk(self, -action.value)
	elseif action_id == INPUT_RIGHT then
		walk(self, action.value)
	elseif action_id == INPUT_JUMP then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	elseif action_id == INPUT_RESTART then
		set_default_state(self)
	end
end

---https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function resolve_collision(self, message)
	local distance = message.distance
	local normal = message.normal

	-- Push the character out of any obstacles
	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			local compensation = (distance - distance * proj) * normal
			go.set_position(go.get_position() + compensation)
			self.correction = self.correction + compensation
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	-- the distance check is a workaround for the character getting stuck while walking on adjacent platforms
	-- on the same Y level
	if math.abs(normal.x) > 0.7 and distance > 0.1 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == MSG_CONTACT_POINT_RESPONSE then
		if message.group == GROUP_OBSTACLES then
			resolve_collision(self, message)
			-- create_marker(self, message.position, 0.5)
		end
	end
end
