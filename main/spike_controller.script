local math_util = require "main.math_util"

local DELETE_POINT = -250

local spawn_time_min = 1
local spawn_time_max = 4
local spawn_time_snap = 1

function init(self)
    self.spawning = false
    self.elapsed_time = 0
    self.next_spawn = 1
    self.bungs = {}
    self.speed = 260
end

function update(self, dt)
    if not self.spawning then
        return
    end

    self.elapsed_time = self.elapsed_time + dt

    if self.elapsed_time >= self.next_spawn then
        self.next_spawn = self.next_spawn + math_util.random_snap(spawn_time_min, spawn_time_max, spawn_time_snap)

        local spawn_pos = go.get_position() + vmath.vector3(0, 0, -0.5)
        local id = factory.create("#spike_factory", spawn_pos)
        go.set_scale(2, id)
        table.insert(self.bungs, id)
    end

    if self.spawning then
        self.speed = math_util.lerp(260, 660, self.elapsed_time / 10)
        for _, spike in ipairs(self.bungs) do
            go.set_position(go.get_position(spike) + vmath.vector3(-self.speed * dt, 0, 0), spike)
        end

        for i = #self.bungs, 1, -1 do
            local spike = self.bungs[i]
            if go.get_position(spike).x < DELETE_POINT then
                go.delete(spike)
                table.remove(self.bungs, i)
            end
        end
    end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("damage") then
        for _, id in ipairs(self.bungs) do
            if go.exists(id) then
                msg.post(id, "damage", message)
            end
        end
        self.spawning = false
    elseif message_id == hash("start") then
        self.spawning = true
        self.elapsed_time = 0
        self.next_spawn = 1
        for i = #self.bungs, 1, -1 do
            local id = self.bungs[i]
            if id and go.exists(id) then
                go.delete(id)
            end
            self.bungs[i] = nil
        end
    elseif message_id == hash("win") then
        self.spawning = false
    end
end
